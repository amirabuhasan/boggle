{"version":3,"sources":["components/Board.js","components/Timer.js","components/TopBar.js","components/AnswersList.js","components/CurrentWord.js","components/ErrorBanner.js","components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["base","Board","renderTile","rowIndex","i","character","_this$props","_this","props","specialChar","handleChange","editingTile","specialTile","index","row","react_default","a","createElement","className","concat","type","name","onChange","autoFocus","_this2","this","_this$props2","rows","validWord","handleSelectTile","isSelected","disabled","map","key","onClick","style","backgroundColor","Component","Timer","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","convertSecondsToReadableTime","seconds","miliseconds","moment","utc","format","state","prevProps","startCountdown","startTimer","handleEndCountdown","initialTime","timer","setInterval","setState","clearInterval","setTimeout","TopBar","score","handleReplay","highScore","localStorage","getItem","Timer_Timer","Icon_default","AnswersList","answers","answer","CurrentWord","currentWord","ErrorBanner","showError","errorMessage","handleClose","Snackbar_default","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","ContentProps","aria-describedby","SnackbarContent_default","classes","root","message","id","Error_default","variant","Transition","Slide_default","assign","direction","Modal","isOpen","activeModal","start","header","subheader","react","cta","end","Dialog_default","fullWidth","TransitionComponent","keepMounted","aria-labelledby","DialogTitle_default","DialogContent_default","DialogContentText_default","DialogActions_default","Button_default","color","App","dictionary","boardRows","selectedTiles","anyChar","modalText","modalType","onPressEnter","e","closeModal","submitAnswer","shuffleTiles","tiles","length","j","Math","floor","random","_ref","openModal","handleStartCountdown","resetBoard","setItem","window","location","reload","selectedTile","isEditing","checkSelected","unSelectTile","isAdjacent","showErrorBanner","find","tile","selectTile","toConsumableArray","isValidWord","removedFromSelectedTiles","filter","JSON","stringify","_loop","filteredSelectedTiles","_this$setState","field","target","value","toUpperCase","defineProperty","objectSpread","getCurrentWord","includes","toLowerCase","join","currentSelectedTile","alternativeArray","arrayToFind","abs","_this$state","closeErrorBanner","removeItem","fetch","then","response","text","split","tileArray","shuffledTiles","push","splice","document","addEventListener","removeEventListener","_this$state2","isLoading","components_ErrorBanner","Modal_Modal","timeAllocatedInMinutes","TopBar_TopBar","Board_Board","maxWordLength","submitChar","CurrentWord_CurrentWord","display","marginBottom","marginRight","AnswersList_AnswersList","Boolean","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.97e3c91b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst base = 'board';\n\nexport default class Board extends Component {\n    renderTile = (rowIndex, i, character) => {\n        const { specialChar, handleChange, editingTile, specialTile } = this.props;\n\n        if (i === specialTile.index && rowIndex === specialTile.row && specialChar !== '') {\n            return (\n                <p>{ specialChar }</p>\n            )\n        } else if (editingTile && i === editingTile.index && rowIndex === editingTile.row) {\n            return (\n                <div className={`${base}__edit-char-container`}>\n                    <label>Character:</label>\n                    <input className={`${base}__edit-char`} type='text' name='specialChar' onChange={ handleChange } autoFocus />\n                </div>\n            )\n        } else {\n            return <p>{ character }</p>\n        }\n    };\n\n    render() {\n        const { rows, validWord, handleSelectTile, isSelected, disabled } = this.props;\n        return (\n            <div className={ base }>\n                <div className={ `${base}__container` }>\n                    {\n                        rows.map((row, rowIndex) => (\n                            <div className={ `${base}__row display--flex` } key={ rowIndex }>\n                                { row.map((character, i) => (\n                                    <div className={ `${base}__tile ${ disabled && !isSelected(rowIndex, i) ? 'disabled' : ''}` } onClick={() => handleSelectTile(rowIndex, i, character)} key={ i } style={{ backgroundColor: isSelected(rowIndex, i) ? validWord ? '#00e676' : '#f44336' : ''}}>\n                                       { this.renderTile(rowIndex, i, character) }\n                                    </div>\n                                ))}\n                            </div>\n                        ))\n                    }\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport moment from 'moment';\n\nconst base = 'timer';\nexport default class Timer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { seconds: props.seconds };\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.startCountdown !== this.props.startCountdown) {\n            this.props.startCountdown && this.startTimer();\n        }\n    }\n\n    convertSecondsToReadableTime = (seconds) => {\n        const miliseconds = seconds * 1000;\n        return moment.utc(miliseconds)\n            .format('mm:ss');\n    };\n\n    startTimer() {\n        let { seconds, handleEndCountdown } = this.props;\n        let initialTime = seconds;\n        const timer = setInterval(() => {\n            initialTime -= 1;\n            this.setState({ seconds: initialTime });\n            if (initialTime <= 0) {\n                clearInterval(timer);\n                setTimeout(() => {\n                    handleEndCountdown();\n                }, 100)\n            }\n        }, 1000);\n    }\n\n    render() {\n        return (\n            <div className={ base }>\n                <p>{ this.convertSecondsToReadableTime(this.state.seconds) }</p>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Icon from '@material-ui/core/Icon';\nimport Timer from \"./Timer\";\n\nconst base = 'top-bar';\n\nexport default class TopBar extends Component {\n    render() {\n        const { score, startCountdown, handleEndCountdown, seconds, handleReplay } = this.props;\n        const highScore = localStorage.getItem('high_score');\n        return (\n            <div className={ base }>\n                { highScore && <p className={ `${base}__score` }>High score: { highScore }</p> }\n                <p className={ `${base}__score` }>Your score: { score }</p>\n                <Timer seconds={ seconds } startCountdown={ startCountdown } handleEndCountdown={ handleEndCountdown }/>\n                <Icon className={ `${base}__replay-icon` } onClick={ handleReplay }>replay</Icon>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\n\nconst base = 'answers-list';\n\nexport default class AnswersList extends Component {\n    render() {\n        const { answers } = this.props;\n        return (\n            <ul className={ base }>\n                { answers.map((answer, i) => (\n                    <li className={ `${base}__answer`} key={ i }>{ answer }</li>\n                ))}\n            </ul>\n        )\n    }\n}","import React, { Component } from 'react';\n\nconst base = 'current-word';\n\nexport default class CurrentWord extends Component {\n    render() {\n        const { currentWord } = this.props;\n        return (\n            <div className={ base }>\n                <p>{ currentWord }</p>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport ErrorIcon from '@material-ui/icons/Error';\n\nconst base = 'error-banner';\n\nclass ErrorBanner extends Component {\n    render() {\n        const { showError, errorMessage, handleClose } = this.props;\n        return (\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                open={ showError }\n                autoHideDuration={ 3000 }\n                onClose={ handleClose }\n                ContentProps={{\n                    'aria-describedby': 'message-id',\n                }}\n            >\n            <SnackbarContent\n                classes={{ root: base }}\n                ContentProps={{\n                    'aria-describedby': 'message-id',\n                }}\n                message={\n                    <span id=\"message-id\" className={`${base}__message`}>{ errorMessage }\n                        <ErrorIcon className={`${base}__icon`} />\n                    </span>}\n                variant=\"error\"\n            />\n            </Snackbar>\n        )\n    }\n}\n\nexport default ErrorBanner;","import React, { Component, Fragment } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport moment from \"moment\";\n\nconst base = 'modal';\n\nfunction Transition(props) {\n    return <Slide direction=\"up\" {...props} />;\n}\n\nexport default class Modal extends Component {\n    convertSecondsToReadableTime = (seconds) => {\n        const miliseconds = seconds * 1000;\n        return moment.utc(miliseconds)\n            .format('m');\n    };\n\n    render() {\n        const { type, handleClose, score, seconds } = this.props;\n        const isOpen = type ? true : false;\n        const highScore = localStorage.getItem('high_score');\n        const modalText = {\n            start: {\n                header: 'Welcome to the game!',\n                subheader:\n                    <Fragment>\n                        <span>\n                            You will be playing a game called Boggle.The goal is to find as many 3 - 4 character words as possible in { this.convertSecondsToReadableTime(seconds) > 1 ? this.convertSecondsToReadableTime(seconds) + ' minutes' : this.convertSecondsToReadableTime(seconds) + ' minute' }. Special characters are denoted by \"*\", and can be substituted with any character of your choice.\n                        </span>\n                        <br /><br />\n                        <span>Good luck!</span>\n                    </Fragment>,\n                cta: 'Okie!'\n            },\n            end: {\n                header: (highScore && score > highScore) ? 'Congratulations! You set a new high score.' : 'Times up!',\n                subheader:\n                    <Fragment>\n                        { highScore &&\n                            <Fragment>\n                                <span>High score: <strong>{ highScore }</strong></span>\n                                <br />\n                            </Fragment>\n                        }\n                        <span>Your score: <strong>{ score }</strong></span>\n                    </Fragment>,\n                cta: 'Play again'\n            }\n        };\n\n        const activeModal = modalText[type];\n\n        return (\n            isOpen ?\n                (\n                    <Dialog\n                        className={ base }\n                        fullWidth={ true }\n                        open={ isOpen }\n                        TransitionComponent={Transition}\n                        keepMounted\n                        onClose={ handleClose }\n                        aria-labelledby=\"alert-dialog-slide-title\"\n                        aria-describedby=\"alert-dialog-slide-description\"\n                    >\n                        <DialogTitle id=\"alert-dialog-slide-title\">\n                            { activeModal.header }\n                        </DialogTitle>\n                        <DialogContent>\n                            <DialogContentText id=\"alert-dialog-slide-description\">\n                                { activeModal.subheader }\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={ handleClose } color=\"primary\">\n                                { activeModal.cta }\n                            </Button>\n                        </DialogActions>\n                    </Dialog>\n                )\n                : <div />\n        )\n    }\n}","import React, { Component, Fragment } from 'react';\nimport './resources/scss/main.scss';\nimport Board from \"./components/Board\";\nimport TopBar from \"./components/TopBar\";\nimport AnswersList from \"./components/AnswersList\";\nimport CurrentWord from \"./components/CurrentWord\";\nimport ErrorBanner from \"./components/ErrorBanner\";\nimport Modal from \"./components/Modal\";\nimport Button from '@material-ui/core/Button';\n\nconst tilesInRow = 4;\nconst timeAllocatedInMinutes = 5;\nconst timeAllocatedInSeconds = timeAllocatedInMinutes * 60;\n\nclass App extends Component {\n    state = {\n        dictionary: [],\n        boardRows: [],\n        selectedTiles: [],\n        validWord: false,\n        answers: [],\n        anyChar: '',\n        editingTile: null,\n        specialChar: '',\n        specialTile: {},\n        showError: false,\n        errorMessage: '',\n        modalText: '',\n        modalType: '',\n        startCountdown: false\n    };\n\n    componentDidMount() {\n        setTimeout(() => {\n            if (localStorage.getItem('is_replay')) {\n                this.handleStartCountdown();\n                localStorage.removeItem('is_replay');\n            } else {\n                this.openModal('start');\n            }\n        }, 100);\n        fetch('data/dictionary.txt')\n            .then(response => response.text())\n            .then(text => this.setState({ dictionary: text.toLowerCase().split(\"\\n\") }));\n\n        fetch('data/testBoard.txt')\n            .then(response => response.text())\n            .then(text => {\n                const tileArray = text.split(\", \");\n                const shuffledTiles = this.shuffleTiles(tileArray);\n                let boardRows = [];\n                while (shuffledTiles.length > 0) {\n                    boardRows.push(shuffledTiles.splice(0, tilesInRow));\n                }\n                this.setState({ boardRows })\n            });\n        document.addEventListener(\"keydown\", this.onPressEnter);\n    };\n\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.onPressEnter);\n    };\n\n    onPressEnter = (e) => {\n        const { modalType } = this.state;\n        if (e.key === 'Enter') {\n            if (modalType) {\n                this.closeModal()\n            } else {\n                this.submitAnswer()\n            }\n        }\n    };\n\n    shuffleTiles = (tiles) => {\n        for (let i = tiles.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [tiles[i], tiles[j]] = [tiles[j], tiles[i]];\n        }\n        return tiles\n    };\n\n    openModal = (type) => {\n        this.setState({ modalType: type })\n    };\n\n    closeModal = () => {\n        const { modalType } = this.state;\n        switch(modalType) {\n            case 'start':\n                this.handleStartCountdown();\n                break;\n            case 'end':\n                this.handleReplay();\n                break;\n        }\n        this.setState({ modalType: '' })\n    };\n\n    resetBoard = () => {\n        this.setState({ selectedTiles: [], specialChar: '', specialTile: {}, validWord: false, editingTile: null })\n    };\n\n    handleReplay = () => {\n        localStorage.setItem('is_replay', true);\n        window.location.reload()\n    };\n\n    handleSelectTile = (rowIndex, index, character) => {\n        const { specialChar } = this.state;\n        const selectedTile = { row: rowIndex, index, character };\n\n        this.isEditing(false);\n        if (this.checkSelected(selectedTile)) {\n            this.unSelectTile(selectedTile, character);\n        } else {\n            if (this.isAdjacent(selectedTile)) {\n                if (character === '*') {\n                    if (specialChar) {\n                        this.showErrorBanner(\"You can only use one special character per word\")\n                    } else {\n                        this.isEditing(character, selectedTile);\n                    }\n                } else {\n                    if (this.state.selectedTiles.find(tile => tile.row === rowIndex && tile.index === index)) {\n                    } else {\n                        this.selectTile(selectedTile, character);\n                        this.isSelected(rowIndex, index);\n                    }\n                }\n            } else {\n                this.showErrorBanner(\"Choose a tile that is adjacent to the last tile\")\n            }\n        }\n    };\n\n    selectTile = (selectedTile) => {\n        this.setState({\n            selectedTiles: [...this.state.selectedTiles, selectedTile]\n        }, () => { this.isValidWord() });\n    };\n\n    unSelectTile = (selectedTile, character) => {\n        let isAdjacent = false;\n\n        const removedFromSelectedTiles = this.state.selectedTiles.filter(tile => (JSON.stringify({ row: tile.row, index: tile.index }) !== JSON.stringify({ row: selectedTile.row, index: selectedTile.index })));\n        if (removedFromSelectedTiles.length > 0) {\n            for (let i = 0; i < removedFromSelectedTiles.length; i++) {\n                const filteredSelectedTiles = removedFromSelectedTiles.filter(tile => JSON.stringify({ row: tile.row, index: tile.index }) !== JSON.stringify({ row: removedFromSelectedTiles[i].row, index: removedFromSelectedTiles[i].index }));\n                if (this.isAdjacent(removedFromSelectedTiles[i], filteredSelectedTiles)) {\n                    isAdjacent = true;\n                } else {\n                    isAdjacent = false;\n                    break\n                }\n            }\n        } else {\n            isAdjacent = true;\n        }\n\n        if (isAdjacent) {\n            this.setState({\n                selectedTiles: removedFromSelectedTiles,\n            }, () => this.isValidWord());\n            if (character === '*') {\n                this.setState({\n                    specialChar: ''\n                })\n            }\n        } else {\n            this.showErrorBanner(\"Your tiles won't be adjacent if you remove this tile!\")\n        }\n    };\n\n    checkSelected = (selectedTile) => {\n        const { selectedTiles } = this.state;\n        return selectedTiles.find(tile => JSON.stringify({ row: tile.row, index: tile.index }) === JSON.stringify({ row: selectedTile.row, index: selectedTile.index }))\n    };\n\n    isEditing = (character, selectedTile) => {\n        if (!character) {\n            this.setState({ editingTile: null });\n        } else {\n            if (!this.checkSelected(selectedTile)) {\n                if (this.state.editingTile) {\n                    this.setState({ editingTile: null });\n                } else {\n                    this.setState({ editingTile: selectedTile });\n                    this.setState({ specialTile: selectedTile });\n                }\n            }\n        }\n    };\n\n    handleChange = (e) => {\n        const field = e.target.name;\n        const value = e.target.value.toUpperCase();\n        this.setState({\n            [field]: value,\n            specialTile: {\n                ...this.state.specialTile,\n                character: value\n            }\n        }, () => {\n            this.selectTile(this.state.specialTile, value)\n        });\n        this.isSelected(this.state.specialTile.rowIndex, this.state.specialTile.index);\n    };\n\n    isValidWord = () => {\n        const { dictionary } = this.state;\n        const currentWord = this.getCurrentWord();\n        if (currentWord.length >= 3) {\n            if (dictionary.includes(currentWord.toLowerCase())) {\n                this.setState({ validWord: true })\n            } else {\n                this.setState({ validWord: false })\n            }\n        } else {\n            this.setState({ validWord: false })\n        }\n    };\n\n    getCurrentWord = () => {\n        const { selectedTiles } = this.state;\n        return selectedTiles.map((tile) => tile.character).join(\"\");\n    };\n\n    isAdjacent = (currentSelectedTile, alternativeArray) => {\n        const { selectedTiles } = this.state;\n        const arrayToFind = alternativeArray ? alternativeArray : selectedTiles;\n        if (arrayToFind.length === 0) {\n            return true\n        } else if (alternativeArray) {\n            return arrayToFind.find(selectedTile => Math.abs(selectedTile.row - currentSelectedTile.row) <= 1 && Math.abs(selectedTile.index - currentSelectedTile.index) <= 1);\n        } else {\n            return Math.abs(arrayToFind[arrayToFind.length - 1].row - currentSelectedTile.row) <= 1 && Math.abs(arrayToFind[arrayToFind.length - 1].index - currentSelectedTile.index) <= 1;\n        }\n    };\n\n    isSelected = (rowIndex, i) => {\n        const { selectedTiles } = this.state;\n        return selectedTiles.find(selectedTile => selectedTile.row === rowIndex && selectedTile.index === i)\n    };\n\n    submitAnswer = () => {\n        const { validWord, answers } = this.state;\n        const currentWord = this.getCurrentWord();\n\n        if (answers.includes(currentWord)) {\n            this.showErrorBanner(\"Oops! It seems like you've already selected the word!\")\n        } else if (validWord) {\n            this.setState({ answers: [...this.state.answers, currentWord] });\n            this.resetBoard();\n        } else if (currentWord.length < 3){\n            this.showErrorBanner(\"Oops! It seems your word has less than 3 characters!\")\n        } else {\n            this.showErrorBanner(\"It seems that this is not a valid word.\")\n        }\n    };\n\n    showErrorBanner = (message) => {\n        this.setState({ showError: true, errorMessage: message });\n    };\n\n    closeErrorBanner = () => {\n        this.setState({ showError: false, errorMessage: '' })\n    };\n\n    handleStartCountdown = () => {\n        this.setState({ startCountdown: true })\n    };\n\n    handleEndCountdown = () => {\n        const { answers } = this.state;\n        const score = answers.length * 10;\n\n        setTimeout(() => {\n            if ((score > 0 && !localStorage.getItem('high_score')) || score > localStorage.getItem('high_score')) {\n                localStorage.setItem('high_score', score);\n            }\n        }, 500);\n\n        this.openModal('end');\n    };\n\n    render() {\n        const { dictionary, boardRows, validWord, answers, editingTile, specialChar, specialTile, selectedTiles, showError, errorMessage, modalType, startCountdown } = this.state;\n        const isLoading = dictionary.length === 0 || boardRows === 0;\n        return (\n            <div className='App'>\n               <div className='container'>\n                   <ErrorBanner handleClose={ this.closeErrorBanner } showError={ showError } errorMessage={ errorMessage }/>\n                   <Modal type={ modalType } handleClose={ this.closeModal } score={ answers.length * 10 } seconds={ timeAllocatedInSeconds }/>\n                   <TopBar score={ answers.length * 10 } startCountdown={ startCountdown } handleEndCountdown={ this.handleEndCountdown } seconds={ timeAllocatedInSeconds } handleReplay={ this.handleReplay }/>\n                   { !isLoading\n                       ?\n                           (\n                               <Fragment>\n                                   <Board\n                                       rows={ boardRows }\n                                       maxWordLength={ tilesInRow }\n                                       dictionary={ dictionary }\n                                       handleSelectTile={ this.handleSelectTile }\n                                       validWord={ validWord }\n                                       isSelected={ this.isSelected }\n                                       submitChar={ this.submitChar }\n                                       editingTile={ editingTile }\n                                       specialChar={ specialChar }\n                                       handleChange={ this.handleChange }\n                                       specialTile={ specialTile }\n                                       disabled={ selectedTiles.length === tilesInRow }\n                                   />\n                                   <CurrentWord currentWord={ this.getCurrentWord() }/>\n                                   <div style={ { display: 'flex', marginBottom: '20px' } }>\n                                       <Button variant=\"contained\" color=\"secondary\" onClick={ this.submitAnswer }\n                                               style={ { marginRight: '10px' } }>\n                                           Submit Answer\n                                       </Button>\n                                       <Button variant=\"contained\" onClick={ this.resetBoard }>\n                                           Clear\n                                       </Button>\n                                   </div>\n                                   <AnswersList answers={ answers }/>\n                               </Fragment>\n                           )\n                       : <div>Loading...</div>\n                   }\n               </div>\n            </div>\n        );\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}